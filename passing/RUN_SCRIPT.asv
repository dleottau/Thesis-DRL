function f = RUN_SCRIPT(x,RUNS,stringName)

conf.Test = 0;
folder    = 'Opti/';

global flagFirst;
global opti;
conf.opti = opti;

%% Parameters.-------------------------------------------------------------
conf.episodes      = 1500;   % Maximum number of episodes
conf.Ts            = 0.2;    % Sample time of a RL step
conf.maxDistance   = 4000;   % Max ball distance permited before to end the episode X FIELD DIMENSION
conf.maxDistance_x = 6000;   % Max ball distance permited before to end the episode X FIELD DIMENSION
conf.maxDistance_y = 4000;   % Max ball distance permited before to end the episode Y FIELD DIMENSION
conf.Runs          = RUNS;   % # of runs
conf.NOISE         = 0.01;   % Noise 0-1
conf.DRL           = 1;      % Decentralized RL(1) or Centralized RL(0)
conf.DRAWS         = 0;      % On-line plot.-
conf.DRAWS1        = 1;      % Enable disable graphics
conf.record        = 1;      % To record logs
conf.fuzzQ         = 0;      % Enables fuzzy Q learning algorithm
conf.Q_INIT        = 0;      % Q table initial values
conf.MAapproach    = x(6);   % Multi Agent Approach

% -------------------------------------------------------------------------
if conf.opti
    conf.DRAWS  = 0;
    conf.record = 1;
end
% -------------------------------------------------------------------------

%% RL parameters.----------------------------------------------------------
RL.param.alpha   = x(1);        % learning rate
RL.param.gamma   = 0.99;        % discount factor
RL.param.lambda    = x(4);        % the decaying elegibiliy trace parameter
RL.param.epsilon   = 1;
RL.param.softmax   = x(2);
RL.param.k         = x(7);        % 1.5 lenience parameter
RL.param.beta      = x(5);        % 0.9 lenience discount factor
RL.param.exp_decay = x(3);

if conf.Test                    % Performance tests
    RL.param.epsilon = 0;
    RL.param.softmax = 0;
end

conf.Rgain = 1e8;
conf.Rvar  = 400;

%% Target and ball position.-----------------------------------------------
conf.Pt = [0 0];          % Target Position
conf.Pb = [1800 0];       % Initial ball poition
% -------------------------------------------------------------------------

%% Parameters of Robot Initial position
conf.r_int = 700;
conf.r_ext = 1200;
conf.c_ang = 120;
% -------------------------------------------------------------------------
conf.deltaVw   = 2;
conf.Vr_max    = [100 40 40];    % x,y,rot Max Speed achieved by the robot.-
conf.Vr_min    = -conf.Vr_max;
conf.Vr_min(1) = 0;
conf.Fr        = 150;            % Friction coefficient
% -------------------------------------------------------------------------

conf.maxDeltaV = conf.Vr_max .* [1/3 1/3 1/3];    % mm/s/Ts
conf.Nactios   = [16,15,8];
% -------------------------------------------------------------------------

if conf.fuzzQ && conf.DRL        
    conf.Nactios = [16,15,8];
end

%% ------------------------------------------------------------------------
conf.V_action_steps = (conf.Vr_max-conf.Vr_min)./(conf.Nactios-[1 1 1]);
conf.feature_step   = [200, 30, 30 600];
conf.feature_min    = [0, -45, -45 0];
conf.feature_max    = [conf.maxDistance_x, 45, 45 conf.Pb(1)];

%% Parameters of the circle.-----------------------------------------------
conf.a3  = 1;                                   
conf.b3  = 1;
conf.r3  = 400;         

%% Parameters of Gaussian Distribution.------------------------------------
mu         = [conf.Pt(1)  conf.Pt(2)];
sigma      = [conf.Rvar^2 0 ; 0 conf.Rvar^2];
conf.f_gmm = @(x,y)mvnpdf([x y],mu,sigma);

%% ------------------------------------------------------------------------
if conf.DRAWS
    size_f = get(0,'ScreenSize');
    figure('position',[0.1*size_f(3) 0.05*size_f(4) 0.85*size_f(3) 0.7*size_f(4)]);
end

%% Counters.---------------------------------------------------------------
conf.cE = 1;    % Contador Episodios.-

% parfor n = 1:RUNS
for n = 1:RUNS
    [pscored(:,n),scored(:, n),dBT(:, n),Q{n},Qy{n},Qw{n}] = Dribbling2d( n, conf, RL );
end

pf_min   = Inf;
pf_max   = -Inf;
interval = 0.7;

for i = 1:RUNS        
    pf(i)    = mean(dBT(ceil(interval*conf.episodes):end,i));
    pf_sd(i) = std(dBT(ceil(interval*conf.episodes):end,i));
    
    if pf(i) < pf_min
        pf_min = pf(i);
    end
    if pf(i) > pf_max
        pf_max          = pf(i);
        results.Qok_x   = Q{i};
        results.Qok_y   = Qy{i};        
        results.Qok_rot = Qw{i};        
    end
end

results.performance(2,3) = pf_min;
results.performance(1,3) = mean(pf);
results.performance(3,3) = pf_max;
results.performance(4,3) = mean(pf_sd);

f = mean(pf); % Fitness function: percentage of goals scored

results.mean_goals = mean(dBT,2);
results.std_goals  = std(dBT,0,2);

if conf.fuzzQ
    stringName=['fuz-' stringName];
end

if conf.DRAWS1 == 1    
    figure,plot(mean(dBT,2))
    grid
    if conf.record > 0
        saveas(gcf,[folder stringName '.fig'])
    end
end

if conf.Test
    stringName = ['Test-' loadFile];
end
if conf.record > 0
    save ([folder stringName '.mat'], 'results');
end